diff --git a/nest/experiment/pack.py b/nest/experiment/pack.py
index c5ea97f..0b314bf 100644
--- a/nest/experiment/pack.py
+++ b/nest/experiment/pack.py
@@ -6,6 +6,7 @@
 import os
 import time
 import shutil
+import numpy as np
 
 from nest.user import User
 
@@ -26,9 +27,7 @@ class Pack:
             Name of experiment
         """
         timestamp = time.strftime("%d-%m-%Y-%H:%M:%S")
-        Pack.FOLDER = "{exp_name}({timestamp})_dump".format(
-            exp_name=exp_name, timestamp=timestamp
-        )
+        Pack.FOLDER = "{exp_name}".format(exp_name=exp_name)
         os.mkdir(Pack.FOLDER)
         Pack.set_owner(Pack.FOLDER)
 
@@ -48,7 +47,27 @@ class Pack:
         with open(path, "w") as file:
             file.write(content)
         Pack.set_owner(path)
+    
+    
+    @staticmethod
+    def dump_dat(filename, dat_array):
+        """
+        Dump a plot into Pack.FOLDER
 
+        Parameters
+        ----------
+        subfolder : str
+            Subfolder to which plot belongs to
+        filename : str
+            Name of plot
+        fig : matplotlib.pyplot.fig
+            Plot figure to be stored in file
+        """
+        path = os.path.join(Pack.FOLDER, filename)
+        with open(path, "w") as file:
+            np.savetxt(file, dat_array, delimiter=' ', fmt='%s')
+        Pack.set_owner(path)
+    
     @staticmethod
     def dump_plot(subfolder, filename, fig):
         """
diff --git a/nest/experiment/plotter/iperf3.py b/nest/experiment/plotter/iperf3.py
index 4ba56e7..1c9abbf 100644
--- a/nest/experiment/plotter/iperf3.py
+++ b/nest/experiment/plotter/iperf3.py
@@ -5,6 +5,7 @@
 
 import logging
 import matplotlib.pyplot as plt
+import numpy as np
 
 from ..pack import Pack
 from .common import simple_plot
@@ -82,18 +83,24 @@ def _plot_iperf3_flow(flow, node, dest_ip, local_port):
         return
     (timestamp, sending_rate) = values
 
-    fig = simple_plot(
-        "Iperf3",
-        timestamp,
-        sending_rate,
-        "Time (s)",
-        "Sending rate",
-        legend_string=f"{node} from port {local_port} to {dest_ip}",
-    )
+   # fig = simple_plot(
+   #     "Iperf3",
+   #     timestamp,
+   #     sending_rate,
+   #     "Time (s)",
+   #     "Sending rate",
+   #     legend_string=f"{node} from port {local_port} to {dest_ip}",
+   # )
+
+    #filename = f"{node}_{dest_ip}_{local_port}_sending_rate.png"
+    #Pack.dump_plot("iperf3", filename, fig)
+    #plt.close(fig)
+    
+    filename2 = f"sending_rate.dat"
+    dat = np.array([timestamp, sending_rate])
+    a= np.column_stack((dat))
+    Pack.dump_dat(filename2, a)
 
-    filename = f"{node}_{dest_ip}_{local_port}_sending_rate.png"
-    Pack.dump_plot("iperf3", filename, fig)
-    plt.close(fig)
 
 
 # pylint: disable=too-many-locals
@@ -118,4 +125,4 @@ def plot_iperf3(parsed_data):
                 flow_data = connection[dest_ip]
                 for local_port in flow_data:
                     flow = flow_data[local_port]
-                    _plot_iperf3_flow(flow, node, dest_ip, local_port)
+                    _plot_iperf3_flow(flow, node, dest_ip, local_port)
\ No newline at end of file
diff --git a/nest/experiment/plotter/netperf.py b/nest/experiment/plotter/netperf.py
index 964532d..9477d03 100644
--- a/nest/experiment/plotter/netperf.py
+++ b/nest/experiment/plotter/netperf.py
@@ -5,6 +5,7 @@
 
 import logging
 import matplotlib.pyplot as plt
+import numpy as np
 
 from ..pack import Pack
 from .common import simple_plot, mix_plot
@@ -55,19 +56,10 @@ def _plot_netperf_flow(flow, node, dest):
         relative_time = float(data["timestamp"]) - start_time
         timestamp.append(relative_time)
 
-    # TODO: Check if sending_rate is always in Mbps
-    fig = simple_plot(
-        "Netperf",
-        timestamp,
-        sending_rate,
-        "Time (s)",
-        "Sending rate (Mbps)",
-        legend_string=f"{node} to {dest}",
-    )
-
-    filename = "{node}_{dest}_sending_rate.png".format(node=node, dest=dest)
-    Pack.dump_plot("netperf", filename, fig)
-    plt.close(fig)
+    filename = "sending_rate.dat"
+    dat = np.array([timestamp, sending_rate])
+    dat_array= np.column_stack(dat)
+    Pack.dump_dat(filename, dat_array)
 
     return (timestamp, sending_rate)
 
@@ -96,14 +88,14 @@ def plot_netperf(parsed_data):
                         {"label": f"{node} to {dest}", "values": values}
                     )
 
-        if len(all_flow_data) > 1:
-            fig = mix_plot(
-                "Netperf",
-                all_flow_data,
-                "Time (s)",
-                "Sending rate (Mbps)",
-                with_sum=True,
-            )
-            filename = f"{node}_sending_rate.png"
-            Pack.dump_plot("netperf", filename, fig)
-            plt.close(fig)
+       # if len(all_flow_data) > 1:
+       #     fig = mix_plot(
+       #         "Netperf",
+       #         all_flow_data,
+       #         "Time (s)",
+       #         "Sending rate (Mbps)",
+       #         with_sum=True,
+       #     )
+       #     filename = f"{node}_sending_rate.png"
+       #     Pack.dump_plot("netperf", filename, fig)
+       #     plt.close(fig)
\ No newline at end of file
diff --git a/nest/experiment/plotter/ping.py b/nest/experiment/plotter/ping.py
index 4c5a7bb..4e0f101 100644
--- a/nest/experiment/plotter/ping.py
+++ b/nest/experiment/plotter/ping.py
@@ -5,6 +5,7 @@
 
 import logging
 import matplotlib.pyplot as plt
+import numpy as np
 
 from ..pack import Pack
 from .common import simple_plot
@@ -55,17 +56,11 @@ def _plot_ping_flow(flow, node, dest):
         relative_time = float(data["timestamp"]) - start_time
         timestamp.append(relative_time)
 
-    fig = simple_plot(
-        "Ping",
-        timestamp,
-        rtt,
-        "Time (s)",
-        "RTT (ms)",
-        legend_string=f"{node} to {dest}",
-    )
-    filename = "{node}_{dest}_ping.png".format(node=node, dest=dest)
-    Pack.dump_plot("ping", filename, fig)
-    plt.close(fig)
+    filename = "ping.dat"
+    dat = np.array([timestamp, rtt])
+    dat_array= np.column_stack(dat)
+    Pack.dump_dat(filename, dat_array)
+
 
     return (timestamp, rtt)
 
@@ -87,4 +82,4 @@ def plot_ping(parsed_data):
         for connection in node_data:
             for dest in connection:
                 flow = connection[dest]
-                _plot_ping_flow(flow, node, dest)
+                _plot_ping_flow(flow, node, dest)
\ No newline at end of file
diff --git a/nest/experiment/plotter/ss.py b/nest/experiment/plotter/ss.py
index 48fed04..5ae02a1 100644
--- a/nest/experiment/plotter/ss.py
+++ b/nest/experiment/plotter/ss.py
@@ -5,6 +5,7 @@
 
 import logging
 import matplotlib.pyplot as plt
+import numpy as np
 
 from ..pack import Pack
 from .common import simple_plot, mix_plot
@@ -158,19 +159,15 @@ def _plot_ss_flow(flow, node, dest_ip, dest_port):
     (timestamp, flow_params) = values
 
     for param in flow_params:
-        fig = simple_plot(
-            "Socket Stats (ss)",
-            timestamp,
-            flow_params[param],
-            "Time (s)",
-            _get_ylabel(param),
-            legend_string=f"{node} to {dest_ip}:{dest_port}",
-        )
+        filename2 = f"{param}.dat"
+        dat = np.array([timestamp, flow_params[param]])
+        dat_array= np.column_stack(dat)
+        Pack.dump_dat(filename2, dat_array)
 
-        filename = f"{node}_{dest_ip}:{dest_port}_{param}.png"
-        Pack.dump_plot("ss", filename, fig)
-        plt.close(fig)
 
+    
+    
+       
     return (timestamp, flow_params)
 
 
@@ -228,9 +225,9 @@ def plot_ss(parsed_data):
                                 {"values": (x_vals[i], y_vals[i]), "label": labels[i]}
                             )
 
-                        fig = mix_plot(
-                            "Socket Stats (ss)", data, "Time (s)", _get_ylabel(param)
-                        )
-                        filename = f"{node}_{dest_ip}_{param}.png"
-                        Pack.dump_plot("ss", filename, fig)
-                        plt.close(fig)
+                       # fig = mix_plot(
+                       #     "Socket Stats (ss)", data, "Time (s)", _get_ylabel(param)
+                       # )
+                       # filename = f"{node}_{dest_ip}_{param}.png"
+                       # Pack.dump_plot("ss", filename, fig)
+                       # plt.close(fig)
\ No newline at end of file
diff --git a/nest/experiment/plotter/tc.py b/nest/experiment/plotter/tc.py
index c46e37f..5a1779a 100644
--- a/nest/experiment/plotter/tc.py
+++ b/nest/experiment/plotter/tc.py
@@ -5,6 +5,8 @@
 
 import logging
 import matplotlib.pyplot as plt
+import numpy as np
+
 
 from .common import simple_plot
 from ..pack import Pack
@@ -72,17 +74,10 @@ def _plot_tc_stats(stats, node, interface):
     (qdisc, timestamp, stats_params) = values
 
     for param in stats_params:
-        fig = simple_plot(
-            "Traffic Control (tc)",
-            timestamp,
-            stats_params[param],
-            "Time (s)",
-            param,
-            legend_string=f"Interface {interface} in {node}",
-        )
-        filename = f"{node}_{interface}_{qdisc}_{param}.png"
-        Pack.dump_plot("tc", filename, fig)
-        plt.close(fig)
+        filename2 = f"{param}.dat"
+        dat = np.array([timestamp, stats_params[param]])
+        dat_array= np.column_stack(dat)
+        Pack.dump_dat(filename2, dat_array)
 
 
 def plot_tc(parsed_data):
@@ -103,4 +98,4 @@ def plot_tc(parsed_data):
                 qdisc = interfaces[interface]
                 for handle in qdisc:
                     stats = qdisc[handle]
-                    _plot_tc_stats(stats, node, interface)
+                    _plot_tc_stats(stats, node, interface)
\ No newline at end of file
